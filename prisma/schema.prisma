generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  username      String?        @unique
  email         String?        @unique
  emailVerified Boolean        @default(false)
  phoneVerified Boolean        @default(false)
  phone         String?        @unique
  password      String?
  role          Role
  deleted       Boolean        @default(false)
  favorites     Favorite[]
  cartItems     CartItem[]
  reviews       Review[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Token         Token[]
  Notification  Notification[]
  Sale          Sale[]
}

enum Role {
  ADMIN
  USER
  EMPLOYEE
}

enum Privilege {
  MANAGE_PRODUCTS
  MANAGE_ORDERS
  MANAGE_USERS
  VIEW_ORDERS
  VIEW_PRODUCTS
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deleted     Boolean          @default(false)
  Favorite    Favorite[]
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  image     String?
  parentId  String?
  parent    Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children  Category[] @relation("SubCategories")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  color     String?
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id        String      @id @default(cuid())
  productId String
  color     String
  size      String
  deleted   Boolean     @default(false)
  product   Product     @relation(fields: [productId], references: [id])
  Inventory Inventory[]
}

model Discount {
  id          String    @id @default(cuid())
  inventoryId String
  percentage  Float     @default(0.0)
  startDate   DateTime
  endDate     DateTime
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id        String         @id @default(cuid())
  variantId String
  quantity  Int            @default(0)
  price     Float
  updatedAt DateTime       @updatedAt
  discounts Discount[]
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  CartItem  CartItem[]
  createdAt DateTime       @default(now())
  deleted   Boolean        @default(false)
  Sale      Sale[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id          String    @id @default(cuid())
  userId      String
  quantity    Int       @default(1)
  user        User      @relation(fields: [userId], references: [id])
  product     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Token {
  id        String   @id @default(cuid())
  token     String
  type      TokeType
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TokeType {
  PASSWORD_SET
  PASSWORD_RESET
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean          @default(false)
  type      NotificationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

model Sale {
  id            String     @id @default(cuid())
  userId        String?
  client        String?
  status        SaleStatus
  paymentMethod String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User?      @relation(fields: [userId], references: [id])
  inventoryId   String
  inventory     Inventory  @relation(fields: [inventoryId], references: [id])
  quantity      Int
  amount        Float
}

enum SaleStatus {
  PENDING
  COMPLETED
  DELIVERING
  CANCELLED
  REFUNDED
}
