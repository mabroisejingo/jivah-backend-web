generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String
  username      String?    @unique
  email         String?    @unique
  emailVerified Boolean    @default(false)
  phoneVerified Boolean    @default(false)
  phone         String?    @unique
  password      String?
  role          Role
  deleted       Boolean    @default(false)
  favorites     Favorite[]
  cartItems     CartItem[]
  reviews       Review[]
  orders        Order[]
}

enum Role {
  ADMIN
  USER
  EMPLOYEE
}

enum Privilege {
  MANAGE_PRODUCTS
  MANAGE_ORDERS
  MANAGE_USERS
  VIEW_ORDERS
  VIEW_PRODUCTS
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deleted     Boolean          @default(false)
  Favorite    Favorite[]
}

model Category {
  id       String     @id @default(cuid())
  name     String     @unique
  parentId String?
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children Category[] @relation("SubCategories")
  products Product[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  color     String?
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id        String      @id @default(cuid())
  productId String
  color     String
  size      String
  product   Product     @relation(fields: [productId], references: [id])
  Inventory Inventory[]
}

model Discount {
  id          String    @id @default(cuid())
  inventoryId String
  percentage  Float     @default(0.0)
  startDate   DateTime
  endDate     DateTime
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
}

model Inventory {
  id        String         @id @default(cuid())
  variantId String
  quantity  Int            @default(0)
  price     Float
  updatedAt DateTime       @updatedAt
  discounts Discount[]
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id          String    @id @default(cuid())
  userId      String
  quantity    Int       @default(1)
  user        User      @relation(fields: [userId], references: [id])
  product     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  quantity    Int
  price       Float
  order       Order     @relation(fields: [orderId], references: [id])
  product     Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
